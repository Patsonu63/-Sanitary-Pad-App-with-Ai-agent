import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();

  Future<void> initialize() async {
    tz.initializeTimeZones(); // Initialize timezone database

    // Android settings
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher'); // Default icon

    // iOS settings - request permissions
    final DarwinInitializationSettings initializationSettingsIOS =
        DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
      onDidReceiveLocalNotification: (id, title, body, payload) async {
        // Handle notification tapped logic here for older iOS versions
      },
    );

    final InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    await flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (NotificationResponse notificationResponse) async {
         // Handle notification tapped logic here (when app is running or background)
         final String? payload = notificationResponse.payload;
         if (payload != null) {
            print('Notification payload: $payload');
         }
         // You could navigate to a specific screen based on payload
      }
    );

     // Request permissions explicitly for newer Android versions
     final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
      flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>();
      await androidImplementation?.requestNotificationsPermission(); // For Android 13+

      // Request permission for iOS if needed (usually handled by DarwinInitializationSettings)
      final IOSFlutterLocalNotificationsPlugin? iosImplementation =
        flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<
            IOSFlutterLocalNotificationsPlugin>();
        await iosImplementation?.requestPermissions(
        alert: true,
        badge: true,
        sound: true,
        );
  }

  Future<void> schedulePadChangeReminder(Duration delay) async {
    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
      'pad_change_channel', // Channel ID
      'Pad Change Reminders', // Channel Name
      channelDescription: 'Reminders to change sanitary pad', // Channel Description
      importance: Importance.max,
      priority: Priority.high,
      showWhen: false, // Don't show timestamp in notification
    );
    const DarwinNotificationDetails iosPlatformChannelSpecifics =
        DarwinNotificationDetails();

    const NotificationDetails platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iosPlatformChannelSpecifics,
    );

    await flutterLocalNotificationsPlugin.zonedSchedule(
      0, // Notification ID
      'Hygiene Reminder', // Notification Title
      'Time to consider changing your pad.', // Notification Body
      tz.TZDateTime.now(tz.local).add(delay), // Schedule time
      platformChannelSpecifics,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      payload: 'pad_change_reminder', // Optional payload
    );
     print('Pad change reminder scheduled for ${delay.inHours} hours later.');
  }

  Future<void> cancelAllNotifications() async {
    await flutterLocalNotificationsPlugin.cancelAll();
     print('All notifications cancelled.');
  }
}